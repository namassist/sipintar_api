// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model TahunAjaran {
  id        Int      @id @default(autoincrement())
  nama      String

  kelas Kelas[]
  jadwal Jadwal[]
  @@map("tahun_ajarans")
}

model Jurusan {
  id Int @id @default(autoincrement())
  nama_jurusan String @db.VarChar(100)

  prodi Prodi[]
  dosen Dosen[]
  @@map("jurusans")
}

model Prodi {
  id Int @id @default(autoincrement())
  nama_prodi String @db.VarChar(100)
  kode_prodi String @db.VarChar(100) @unique
  jurusan_id Int

  jurusan Jurusan @relation(fields: [jurusan_id], references: [id])
  kelas Kelas[]
  @@map("prodis")
}

model User {
  id Int @id @default(autoincrement())
  username String @db.VarChar(100) @unique
  password String @db.VarChar(100)
  token String? @db.VarChar(255)
  role Role
  
  mahasiswa Mahasiswa?
  dosen Dosen?
  admin Admin?
  @@map("users")
}

model Admin {
  id Int @id @default(autoincrement())
  nama String @db.VarChar(100)
  user_id Int @unique

  user User @relation(fields: [user_id], references: [id])
  @@map("admins")
}

model Mahasiswa {
  id Int @id @default(autoincrement())
  nama_mahasiswa String @db.VarChar(100)
  nim String @unique @db.VarChar(100)
  user_id Int @unique
  kelas_id Int

  user User @relation(fields: [user_id], references: [id])
  kelas Kelas @relation(fields: [kelas_id], references: [id])
  presensiMahasiswa PresensiMahasiswa[]
  @@map("mahasiswas")
}

model Dosen {
  id Int @id @default(autoincrement())
  nama_dosen String @db.VarChar(100)
  nip String @db.VarChar(100)
  user_id Int @unique
  jurusan_id Int

  user User @relation(fields: [user_id], references: [id])
  jurusan Jurusan @relation(fields: [jurusan_id], references: [id])
  kelasMataKuliahDosen KelasMataKuliahDosen[]
  @@map("dosens")
}

model Kelas {
  id Int @id @default(autoincrement())
  nama_kelas String @db.VarChar(100)
  tahun_ajaran_id Int @db.Int()
  prodi_id Int

  prodi Prodi @relation(fields: [prodi_id], references: [id])
  tahunAjaran TahunAjaran @relation(fields: [tahun_ajaran_id], references: [id])
  mahasiswa Mahasiswa[]
  kelasMataKuliahDosen KelasMataKuliahDosen[]
  @@map("kelas")
}

model MataKuliah {
  id Int @id @default(autoincrement())
  kode_mk String @db.VarChar(100)
  nama_mk String @db.VarChar(100)
  total_jam Int @db.Int

  kelasMataKuliahDosen KelasMataKuliahDosen[]
  @@map("mata_kuliahs")
}

model KelasMataKuliahDosen {
  kelas_mk_dosen_id Int @id @default(autoincrement())
  kelas_id Int
  mata_kuliah_id Int
  dosen_id Int

  kelas Kelas @relation(fields: [kelas_id], references: [id])
  mataKuliah MataKuliah @relation(fields: [mata_kuliah_id], references: [id])
  dosen Dosen @relation(fields: [dosen_id], references: [id])
  jadwal Jadwal[]
  jadwalPertemuan JadwalPertemuan[]

  @@map("kelas_mata_kuliah_dosens")
}

model Jadwal {
  id Int @id @default(autoincrement())
  hari String @db.VarChar(100)
  jam_mulai String @db.VarChar(100)
  jam_akhir String @db.VarChar(100)
  ruangan String @db.VarChar(100)
  kelas_mk_dosen_id Int
  tahun_ajaran_id Int

  tahunAjaran TahunAjaran @relation(fields: [tahun_ajaran_id], references: [id])
  kelasMataKuliahDosen KelasMataKuliahDosen @relation(fields: [kelas_mk_dosen_id], references: [kelas_mk_dosen_id])
  @@map("jadwals")
}

model JadwalPertemuan {
  id Int @id @default(autoincrement())
  hari String @db.VarChar(100)
  jam_mulai String @db.VarChar(100)
  jam_akhir String @db.VarChar(100)
  waktu_realisasi DateTime @db.DateTime
  ruangan String @db.VarChar(100)
  qr_code String @db.VarChar(100)
  topik_perkuliahan String @db.VarChar(100)
  status Boolean
  kelas_mk_dosen_id Int

  kelasMataKuliahDosen KelasMataKuliahDosen @relation(fields: [kelas_mk_dosen_id], references: [kelas_mk_dosen_id])
  presensiMahasiswa PresensiMahasiswa[]
  @@map("jadwal_pertemuans")
}

model PresensiMahasiswa {
  id Int @id @default(autoincrement())
  jadwalPertemuan_id Int
  mahasiswa_id Int
  waktu_presensi DateTime @db.DateTime()
  status_presensi StatusPresensi?

  mahasiswa Mahasiswa @relation(fields: [mahasiswa_id], references: [id])
  jadwalPertemuan JadwalPertemuan @relation(fields: [jadwalPertemuan_id], references: [id])
  @@map("presensi_mahasiswas")
}

enum StatusPresensi {
  Hadir
  Sakit
  Ijin
  Alpa
}

enum Role {
  Admin
  Dosen
  Mahasiswa
}